// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id              Int       @id @default(autoincrement())
  name            String
  birthDate       DateTime
  email           String
  userPassword    String
  movies          movieUser[]
  series          seriesUser[]
  family          belongsTo[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model series {
  id              Int       @id @default(autoincrement())
  name            String
  description     String
  genre           String
  rating          Int  
  photo           String
  releaseDate     DateTime
  seasons         season[]
  users           seriesUser[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model season {
  id              Int       @id @default(autoincrement())
  property        series    @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId        Int
  episodes        episode[]
  seasonName      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model episode {
  id              Int       @id @default(autoincrement())
  name            String
  releaseDate     DateTime
  time            Int
  rating          Int  
  photo           String
  description     String
  artist          episodeInvolment[]
  belonging       season  @relation(fields: [seasonId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonId        Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model movie {
  id              Int       @id @default(autoincrement())
  name            String
  releaseDate     DateTime
  time            Int
  genre           String
  rating          Int  
  photo           String
  description     String
  artist          movieInvolment[]
  movies          movieUser[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model artist {
  id              Int       @id @default(autoincrement())
  name            String
  birthDate       DateTime
  originPlace     String
  photo           String
  episodes        episodeInvolment[]
  movies          movieInvolment[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model episodeInvolment {
  participation   episode  @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId       Int
  person          artist  @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId        Int
  role            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@id([episodeId, artistId])
}

model movieInvolment {
  participation   movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId         Int
  person          artist  @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId        Int
  role            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@id([movieId, artistId])
}

model movieUser {
  movie           movie  @relation(fields: [movieId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  movieId         Int
  users           user  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  isLiked         Boolean   @default(false)
  isDisliked      Boolean   @default(false)
  inWatchlist     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@id([movieId, userId])
}

model seriesUser {
  seriess         series  @relation(fields: [seriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seriesId        Int
  users           user  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  isLiked         Boolean   @default(false)
  isDisliked      Boolean   @default(false)
  inWatchlist     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@id([seriesId, userId])
}

model family {
  id              Int       @id @default(autoincrement())
  email           String
  family          belongsTo[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model belongsTo {
  families        family  @relation(fields: [familyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  familyId        Int
  users           user  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  isHead          Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@id([familyId, userId])
}